// Generated by gencpp from file marker_navigator/SetPositionYawRateRequest.msg
// DO NOT EDIT!


#ifndef MARKER_NAVIGATOR_MESSAGE_SETPOSITIONYAWRATEREQUEST_H
#define MARKER_NAVIGATOR_MESSAGE_SETPOSITIONYAWRATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marker_navigator
{
template <class ContainerAllocator>
struct SetPositionYawRateRequest_
{
  typedef SetPositionYawRateRequest_<ContainerAllocator> Type;

  SetPositionYawRateRequest_()
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , yaw_rate(0.0)
    , frame_id()
    , update_frame(false)  {
    }
  SetPositionYawRateRequest_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , z(0.0)
    , yaw_rate(0.0)
    , frame_id(_alloc)
    , update_frame(false)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef float _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef uint8_t _update_frame_type;
  _update_frame_type update_frame;





  typedef boost::shared_ptr< ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetPositionYawRateRequest_

typedef ::marker_navigator::SetPositionYawRateRequest_<std::allocator<void> > SetPositionYawRateRequest;

typedef boost::shared_ptr< ::marker_navigator::SetPositionYawRateRequest > SetPositionYawRateRequestPtr;
typedef boost::shared_ptr< ::marker_navigator::SetPositionYawRateRequest const> SetPositionYawRateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator1> & lhs, const ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.yaw_rate == rhs.yaw_rate &&
    lhs.frame_id == rhs.frame_id &&
    lhs.update_frame == rhs.update_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator1> & lhs, const ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marker_navigator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ee2f019a1bb5a406925e3d6ca8b4e2e";
  }

  static const char* value(const ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ee2f019a1bb5a40ULL;
  static const uint64_t static_value2 = 0x6925e3d6ca8b4e2eULL;
};

template<class ContainerAllocator>
struct DataType< ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marker_navigator/SetPositionYawRateRequest";
  }

  static const char* value(const ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 z\n"
"float32 yaw_rate\n"
"string frame_id\n"
"bool update_frame\n"
;
  }

  static const char* value(const ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.yaw_rate);
      stream.next(m.frame_id);
      stream.next(m.update_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPositionYawRateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marker_navigator::SetPositionYawRateRequest_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "yaw_rate: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "update_frame: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.update_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARKER_NAVIGATOR_MESSAGE_SETPOSITIONYAWRATEREQUEST_H
