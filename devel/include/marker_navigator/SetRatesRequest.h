// Generated by gencpp from file marker_navigator/SetRatesRequest.msg
// DO NOT EDIT!


#ifndef MARKER_NAVIGATOR_MESSAGE_SETRATESREQUEST_H
#define MARKER_NAVIGATOR_MESSAGE_SETRATESREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marker_navigator
{
template <class ContainerAllocator>
struct SetRatesRequest_
{
  typedef SetRatesRequest_<ContainerAllocator> Type;

  SetRatesRequest_()
    : pitch_rate(0.0)
    , roll_rate(0.0)
    , yaw_rate(0.0)
    , thrust(0.0)  {
    }
  SetRatesRequest_(const ContainerAllocator& _alloc)
    : pitch_rate(0.0)
    , roll_rate(0.0)
    , yaw_rate(0.0)
    , thrust(0.0)  {
  (void)_alloc;
    }



   typedef float _pitch_rate_type;
  _pitch_rate_type pitch_rate;

   typedef float _roll_rate_type;
  _roll_rate_type roll_rate;

   typedef float _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef float _thrust_type;
  _thrust_type thrust;





  typedef boost::shared_ptr< ::marker_navigator::SetRatesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marker_navigator::SetRatesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetRatesRequest_

typedef ::marker_navigator::SetRatesRequest_<std::allocator<void> > SetRatesRequest;

typedef boost::shared_ptr< ::marker_navigator::SetRatesRequest > SetRatesRequestPtr;
typedef boost::shared_ptr< ::marker_navigator::SetRatesRequest const> SetRatesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marker_navigator::SetRatesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marker_navigator::SetRatesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::marker_navigator::SetRatesRequest_<ContainerAllocator1> & lhs, const ::marker_navigator::SetRatesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pitch_rate == rhs.pitch_rate &&
    lhs.roll_rate == rhs.roll_rate &&
    lhs.yaw_rate == rhs.yaw_rate &&
    lhs.thrust == rhs.thrust;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::marker_navigator::SetRatesRequest_<ContainerAllocator1> & lhs, const ::marker_navigator::SetRatesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace marker_navigator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::marker_navigator::SetRatesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marker_navigator::SetRatesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_navigator::SetRatesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marker_navigator::SetRatesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_navigator::SetRatesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marker_navigator::SetRatesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marker_navigator::SetRatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4cb51159014f83f44215573a14bfd5f0";
  }

  static const char* value(const ::marker_navigator::SetRatesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4cb51159014f83f4ULL;
  static const uint64_t static_value2 = 0x4215573a14bfd5f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::marker_navigator::SetRatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marker_navigator/SetRatesRequest";
  }

  static const char* value(const ::marker_navigator::SetRatesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marker_navigator::SetRatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pitch_rate\n"
"float32 roll_rate\n"
"float32 yaw_rate\n"
"float32 thrust\n"
;
  }

  static const char* value(const ::marker_navigator::SetRatesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marker_navigator::SetRatesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pitch_rate);
      stream.next(m.roll_rate);
      stream.next(m.yaw_rate);
      stream.next(m.thrust);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetRatesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marker_navigator::SetRatesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marker_navigator::SetRatesRequest_<ContainerAllocator>& v)
  {
    s << indent << "pitch_rate: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_rate);
    s << indent << "roll_rate: ";
    Printer<float>::stream(s, indent + "  ", v.roll_rate);
    s << indent << "yaw_rate: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "thrust: ";
    Printer<float>::stream(s, indent + "  ", v.thrust);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARKER_NAVIGATOR_MESSAGE_SETRATESREQUEST_H
