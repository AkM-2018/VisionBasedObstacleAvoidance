// Generated by gencpp from file interiit21/SetAttitudeRequest.msg
// DO NOT EDIT!


#ifndef INTERIIT21_MESSAGE_SETATTITUDEREQUEST_H
#define INTERIIT21_MESSAGE_SETATTITUDEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interiit21
{
template <class ContainerAllocator>
struct SetAttitudeRequest_
{
  typedef SetAttitudeRequest_<ContainerAllocator> Type;

  SetAttitudeRequest_()
    : pitch(0.0)
    , roll(0.0)
    , yaw(0.0)
    , thrust(0.0)
    , frame_id()
    , update_frame(false)  {
    }
  SetAttitudeRequest_(const ContainerAllocator& _alloc)
    : pitch(0.0)
    , roll(0.0)
    , yaw(0.0)
    , thrust(0.0)
    , frame_id(_alloc)
    , update_frame(false)  {
  (void)_alloc;
    }



   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _thrust_type;
  _thrust_type thrust;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef uint8_t _update_frame_type;
  _update_frame_type update_frame;





  typedef boost::shared_ptr< ::interiit21::SetAttitudeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interiit21::SetAttitudeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetAttitudeRequest_

typedef ::interiit21::SetAttitudeRequest_<std::allocator<void> > SetAttitudeRequest;

typedef boost::shared_ptr< ::interiit21::SetAttitudeRequest > SetAttitudeRequestPtr;
typedef boost::shared_ptr< ::interiit21::SetAttitudeRequest const> SetAttitudeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interiit21::SetAttitudeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interiit21::SetAttitudeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interiit21::SetAttitudeRequest_<ContainerAllocator1> & lhs, const ::interiit21::SetAttitudeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.yaw == rhs.yaw &&
    lhs.thrust == rhs.thrust &&
    lhs.frame_id == rhs.frame_id &&
    lhs.update_frame == rhs.update_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interiit21::SetAttitudeRequest_<ContainerAllocator1> & lhs, const ::interiit21::SetAttitudeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interiit21

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::interiit21::SetAttitudeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interiit21::SetAttitudeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interiit21::SetAttitudeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interiit21::SetAttitudeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interiit21::SetAttitudeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interiit21::SetAttitudeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interiit21::SetAttitudeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e421d77ce215dcb53681c8651db84668";
  }

  static const char* value(const ::interiit21::SetAttitudeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe421d77ce215dcb5ULL;
  static const uint64_t static_value2 = 0x3681c8651db84668ULL;
};

template<class ContainerAllocator>
struct DataType< ::interiit21::SetAttitudeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interiit21/SetAttitudeRequest";
  }

  static const char* value(const ::interiit21::SetAttitudeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interiit21::SetAttitudeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pitch\n"
"float32 roll\n"
"float32 yaw\n"
"float32 thrust\n"
"string frame_id\n"
"bool update_frame\n"
;
  }

  static const char* value(const ::interiit21::SetAttitudeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interiit21::SetAttitudeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.yaw);
      stream.next(m.thrust);
      stream.next(m.frame_id);
      stream.next(m.update_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetAttitudeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interiit21::SetAttitudeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interiit21::SetAttitudeRequest_<ContainerAllocator>& v)
  {
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "thrust: ";
    Printer<float>::stream(s, indent + "  ", v.thrust);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "update_frame: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.update_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERIIT21_MESSAGE_SETATTITUDEREQUEST_H
